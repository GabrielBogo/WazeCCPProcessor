Prerequisites:
	- IAM credentials with permissions to create/edit/delete all of the infrastructure
	- S3 bucket to store deployment artifacts (Lambda code or binaries depending on language used)
	- If terraform, S3 bucket to store state
	

1. Cloudwatch event that triggers lambda function on schedule to get data from waze
	- CW event with schedule configured
	- CW trigger that targets the lambda function
	- OPTIONAL: SNS notification extensibility point
		- if variable set, create an SNS notification
		- trigger it from the same alarm
		- default to off
2. S3 bucket to store the files we'll create from Waze data
	- Standard S3 bucket, no extra setup required
3. SQS queue to track data the needs to be processed
	- Standard SQS queue with redrive policy to send to a dead-letter queue
	- Second standard SQS queue with long retention to serve as dead-letter queue
4. Dead letter queue monitoring
	- SNS topic for sending notifications of items in DLQ
	- CW alarm that monitors the DLQ and triggers SNS notification
5. Lambda function to get data from Waze, store it in S3, and notify the queue
	- IAM role for lambda to run under
	- IAM policy attached to the role above and giving permission to write to the bucket and queue and to execute the data processor
7. Live queue monitoring
	- CW alarm that monitors the main queue and triggers the data processor if there are visible messages sitting in the queue for a period of time
6. <DATA PROCESSOR>
	- TODO: determine for sure what this will be and describe what needs to be provisioned
7. <DATA STORE>
	- TODO: determine for sure what this will be and if it needs to be provisioned 
	